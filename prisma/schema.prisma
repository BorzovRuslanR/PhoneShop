// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id             Int          @id @default(autoincrement())
  name           String
  price          Float
  desc           String
  img            String
  ratingAverage  Float?
  cart           Cart[]
  orderItems     OrderItem[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  favorites      Favorites[]
  Manufacturer   Manufacturer @relation(fields: [manufacturerId], references: [id])
  manufacturerId Int
  Rating         Rating[]

  // @@map ("products") переименование названия таблиц
}

model Manufacturer {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  Product   Product[]
}

model Rating {
  id        Int      @id @default(autoincrement())
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
}

model Favorites {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  userId    String
  Product   Product  @relation(fields: [productId], references: [id])
  productId Int
}

model Cart {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // + User
  User      User     @relation(fields: [userId], references: [id])
  userId    String
  Product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int
}

model Order {
  id        Int         @id @default(autoincrement())
  status    OrderStatus @default(active)
  total     Float
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  User      User        @relation(fields: [userId], references: [id])
  userId    String
  address   String
  items     OrderItem[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  quantity  Int      @db.SmallInt
  Product   Product? @relation(fields: [productId], references: [id])
  productId Int?
}

enum OrderStatus {
  active
  completed
  rejected
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  orders        Order[]
  carts         Cart[]
  accounts      Account[]
  sessions      Session[]
  favorites     Favorites[]
  Rating        Rating[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
